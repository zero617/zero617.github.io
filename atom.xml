<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zero617 の blog</title>
  <icon>https://zero617.top/icon.png</icon>
  <subtitle>探索科技与二次元的一切</subtitle>
  <link href="https://zero617.top/atom.xml" rel="self"/>
  
  <link href="https://zero617.top/"/>
  <updated>2022-05-10T14:53:33.663Z</updated>
  <id>https://zero617.top/</id>
  
  <author>
    <name>Zero617</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python 环境部署</title>
    <link href="https://zero617.top/2022/05/10/python%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://zero617.top/2022/05/10/python%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-10T14:53:33.663Z</published>
    <updated>2022-05-10T14:53:33.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-环境配置"><a href="#python-环境配置" class="headerlink" title="python 环境配置"></a>python 环境配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>Microsoft Store商店下载 下载完就行了，比较方便</li><li>官网下载 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a><br><img src="https://s2.loli.net/2022/05/10/YJKCTwDlN2Z4GeH.png" alt="2.png"></li></ol><p>安装一路点击next就行了没什么好讲的</p><p>一、概述</p><h3 id="1-1-检查是否已配置成功"><a href="#1-1-检查是否已配置成功" class="headerlink" title="1.1 检查是否已配置成功"></a>1.1 检查是否已配置成功</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开运行窗口</span><br><span class="line">   (1) 快捷键  : Win + r，并输入 cmd</span><br><span class="line">   (2) 直接输入: Python</span><br><span class="line"></span><br><span class="line">2. 若有下列提示，即为 &#x27;安装成功&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://atts.w3cschool.cn/attachments/20210518163525144.png"></p><h2 id="二、环境变量图示"><a href="#二、环境变量图示" class="headerlink" title="二、环境变量图示"></a>二、环境变量图示</h2><h3 id="2-1-进入系统设置"><a href="#2-1-进入系统设置" class="headerlink" title="2.1 进入系统设置"></a>2.1 进入系统设置</h3><p><strong>此电脑 → 属性（右键）</strong></p><p><img src="https://atts.w3cschool.cn/attachments/image/20210730/1627610323553205.png">  </p><h3 id="2-2-设置环境变量"><a href="#2-2-设置环境变量" class="headerlink" title="2.2 设置环境变量"></a>2.2 设置环境变量</h3><p><strong>变量名：Path</strong></p><p><img src="https://atts.w3cschool.cn/attachments/image/20210730/1627610440202388.png">  </p><h2 id="三、扩展"><a href="#三、扩展" class="headerlink" title="三、扩展"></a>三、扩展</h2><h3 id="3-1-在-cmd-中执行-pip-命令"><a href="#3-1-在-cmd-中执行-pip-命令" class="headerlink" title="3.1 在 cmd 中执行 pip 命令"></a>3.1 在 cmd 中执行 pip 命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量名：Path</span><br><span class="line">变量值：; + 下列目录</span><br><span class="line"></span><br><span class="line">说明：若没设置该环境变量，每次执行 pip 命令，都要切换到 Scripts 目录下</span><br><span class="line">     反之，直接执行即可。</span><br></pre></td></tr></table></figure><p><img src="https://atts.w3cschool.cn/attachments/image/20210730/1627610518220818.png">  </p><h1 id="Pycharm-安装"><a href="#Pycharm-安装" class="headerlink" title="Pycharm 安装"></a>Pycharm 安装</h1><p>破解版怎么弄我就不说了 正版也有一个月的试用期，不常用的话可以直接下正版<br>安装就一路点next就行了</p><h2 id="解释器配置"><a href="#解释器配置" class="headerlink" title="解释器配置"></a>解释器配置</h2><p><img src="https://s2.loli.net/2022/05/10/31EIKlLzQ5fgspS.png" alt="3.png"><br><img src="https://s2.loli.net/2022/05/10/JqmIeFDjUKT45vM.png" alt="4.png"><br><img src="https://s2.loli.net/2022/05/10/DkvFn8PcfGmwNpa.png" alt="5.png"></p><h2 id="导入numpy库"><a href="#导入numpy库" class="headerlink" title="导入numpy库"></a>导入numpy库</h2><h2 id="第一种：输入代码块"><a href="#第一种：输入代码块" class="headerlink" title="第一种：输入代码块"></a><strong>第一种：输入代码块</strong></h2><p>在 Terminal 输入 pip install numpy  </p><p><img src="https://img-blog.csdnimg.cn/20210615173415608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODk4Mzgz,size_16,color_FFFFFF,t_70#pic_center"></p><p>添加镜像 -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><h2 id="第二种：视图"><a href="#第二种：视图" class="headerlink" title="第二种：视图"></a><strong>第二种：视图</strong></h2><ol><li>打开 settings</li></ol><p><img src="https://img-blog.csdnimg.cn/2021061517384138.png#pic_center%29"></p><p>2、打开 Python Interpreter</p><p><img src="https://img-blog.csdnimg.cn/20210615181557356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODk4Mzgz,size_16,color_FFFFFF,t_70#pic_center"></p><p>3、输入 numpy, 点击 Install Package</p><p><img src="https://img-blog.csdnimg.cn/20210615173912251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODk4Mzgz,size_16,color_FFFFFF,t_70#pic_center"></p><p>4、完成，叉了</p><p><img src="https://img-blog.csdnimg.cn/20210615174127216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODk4Mzgz,size_16,color_FFFFFF,t_70#pic_center"></p><p>同理可以添加其它库的时候也可以进行相应上的操作</p><p><img src="https://s2.loli.net/2022/05/10/klY9Uyq8AsIDS5m.png" alt="6.png"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;python-环境配置&quot;&gt;&lt;a href=&quot;#python-环境配置&quot; class=&quot;headerlink&quot; title=&quot;python 环境配置&quot;&gt;&lt;/a&gt;python 环境配置&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot;</summary>
        
      
    
    
    
    <category term="courses" scheme="https://zero617.top/categories/courses/"/>
    
    
    <category term="python" scheme="https://zero617.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>测试Hadoop安装及wordcount实例</title>
    <link href="https://zero617.top/2022/05/10/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%B5%8B%E8%AF%95Hadoop%E5%AE%89%E8%A3%85/"/>
    <id>https://zero617.top/2022/05/10/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%B5%8B%E8%AF%95Hadoop%E5%AE%89%E8%A3%85/</id>
    <published>2022-05-10T14:53:33.663Z</published>
    <updated>2022-05-10T14:53:33.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-测试Hadoop安装"><a href="#第二章-测试Hadoop安装" class="headerlink" title="第二章 测试Hadoop安装"></a>第二章 测试Hadoop安装</h1><h2 id="（1）实验目的"><a href="#（1）实验目的" class="headerlink" title="（1）实验目的"></a>（1）实验目的</h2><p>测试hadoop的正常安装</p><h2 id="（2）实验内容"><a href="#（2）实验内容" class="headerlink" title="（2）实验内容"></a>（2）实验内容</h2><p>使用mapreduce中的wordcount程序进行文件的单词统计</p><h2 id="（3）实验基础知识"><a href="#（3）实验基础知识" class="headerlink" title="（3）实验基础知识"></a>（3）实验基础知识</h2><p>Hadoop相关指令</p><h2 id="（5）实验步骤"><a href="#（5）实验步骤" class="headerlink" title="（5）实验步骤"></a>（5）实验步骤</h2><p>浏览器地址栏输入<a href="http://192.168.237.130:50070/explorer.html#/%EF%BC%8C%E8%BF%9B%E5%85%A5datanode">http://192.168.237.130:50070/explorer.html#/，进入datanode</a></p><p>在hadoop中新建文件夹，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /test</span><br></pre></td></tr></table></figure><p>推送文件1.txt到新建的/test下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -put 1.txt /test </span><br></pre></td></tr></table></figure><p>执行wordcount并把结果生成在/output下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop jar /usr/hadoop/hadoop-2.10.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.10.1.jar wordcount /test/1.txt /output</span><br></pre></td></tr></table></figure><p>显示结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -cat /output/*</span><br></pre></td></tr></table></figure><h2 id="（6）实验结果"><a href="#（6）实验结果" class="headerlink" title="（6）实验结果"></a>（6）实验结果</h2><p><img src="https://s6.jpg.cm/2022/04/03/LhnBtH.gif" alt="分布式文件系统"></p><p><img src="https://s6.jpg.cm/2022/04/03/Lhnf0L.jpg" alt="统计结果"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第二章-测试Hadoop安装&quot;&gt;&lt;a href=&quot;#第二章-测试Hadoop安装&quot; class=&quot;headerlink&quot; title=&quot;第二章 测试Hadoop安装&quot;&gt;&lt;/a&gt;第二章 测试Hadoop安装&lt;/h1&gt;&lt;h2 id=&quot;（1）实验目的&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="courses" scheme="https://zero617.top/categories/courses/"/>
    
    
    <category term="Hadoop" scheme="https://zero617.top/tags/Hadoop/"/>
    
    <category term="大数据分析" scheme="https://zero617.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="分布式存储" scheme="https://zero617.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>hadoop环境搭建</title>
    <link href="https://zero617.top/2022/01/12/%E7%AC%AC%E4%B8%80%E7%AB%A0%20hadoop%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://zero617.top/2022/01/12/%E7%AC%AC%E4%B8%80%E7%AB%A0%20hadoop%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-01-12T11:26:44.000Z</published>
    <updated>2022-05-10T14:53:33.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-hadoop环境搭建"><a href="#第一章-hadoop环境搭建" class="headerlink" title="第一章 hadoop环境搭建"></a>第一章 hadoop环境搭建</h1><h2 id="第一节-虚拟机配置"><a href="#第一节-虚拟机配置" class="headerlink" title="第一节 虚拟机配置"></a>第一节 虚拟机配置</h2><p>1.1 安装Vmware软件</p><p>1.2 安装 Centos7 后修改虚拟机名称为 master</p><p>1.3网络连接配置</p><p>根据虚拟网络编辑器修改VMnet8的IP、网关和DNS。</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZ5Ih.png" alt="LKZ5Ih.png"></p><p>1.4虚拟机网络配置</p><p>登录 Cen­tOS 系统，进入 etc/syscon­fig/net­work-scripts 中，编辑 NAT 网卡配置文件。修改为以下变量：</p><pre><code>#修改BOOTPROTO=“static”ONBOOT=&quot;yes&quot;#添加IPADDR=192.168.237.130GATEWAY=192.168.237.2DNS1=119.29.29.29</code></pre><p><img src="https://s6.jpg.cm/2022/04/02/LKZ7US.png" alt="LKZ7US.png"></p><p>1.5重启网卡并检查IP是否变化。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZW0Q.jpg" alt="LKZW0Q.jpg"></p><p>1.6关闭CentOS防火墙</p><p>关闭防火墙并禁止防火墙开机启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service #关闭防火墙</span><br><span class="line">systemctl disable firewalld.service #禁止防火墙开机启动</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZdx2.png" alt="LKZdx2.png"></p><p>可以使用以下命令查看防火墙状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZQoW.png" alt="LKZQoW.png"></p><p>1.7使用fianlshell连接虚拟机继续操作</p><p>图形化界面和ftp工具便于操作。</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZl6H.png" alt="LKZl6H.png"></p><p>PS：如果ssh连接报错，可以尝试执行sudo yum update。</p><h2 id="第二节-基础环境配置"><a href="#第二节-基础环境配置" class="headerlink" title="第二节 基础环境配置"></a>第二节 基础环境配置</h2><p>2.1 配置时钟同步</p><p>在线安装 ntpdate，使用阿里云 ntp 服务器同步时间，date 命令查看当前时间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install ntpdate </span><br><span class="line">ntpdate ntp.aliyun.com</span><br><span class="line">date </span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZA5U.png" alt="LKZA5U.png"></p><p>2.2 配置主机名</p><p>在网络中能够唯一标识主机，和 ip 地址一样，可通过 ip 地址和网络主机名访问这台主机，作用：简化、方便。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname master #修改主机名为mastr</span><br><span class="line">hostname #查看主机名</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZXtO.png" alt="LKZXtO.png"></p><p>2.3 配置hosts列表</p><p>hosts 列表作用是让集群中的每台服务器彼此都知道对方的主机名和 ip 地址，可以在这步时直接加入预计添加的从节点。</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZ6FL.png" alt="LKZ6FL.png"></p><p>验证，ping ip 地址和主机名，结果相同无区别</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZVjf.png" alt="LKZVjf.png"></p><p>2.5 Java安装</p><p>因为系统本身就有Java就没有去安装，但是后来发现无法使用jps命令。遂更新Java版本。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZuUi.png" alt="LKZuUi.png"></p><p>可以用java -version验证Java版本。</p><p>2.6 Hadoop安装</p><p>使用 finalshell上传 hadoop 安装包至 /usr/hadoop文件夹下，解压 Hadoop 安装包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.10.1.tar.gz</span><br></pre></td></tr></table></figure><p>配置 Hadoop 环境变量</p><p>在配置文件最后添加以下两行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/usr/hadoop/hadoop-2.10.0</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZc0w.png" alt="LKZc0w.png"></p><p>将hadoop与java绑定</p><p>设置hadoop配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/hadoop/hadoop-2.10.0/etc/hadoop</span><br><span class="line">vi hadoop-env.sh</span><br></pre></td></tr></table></figure><p>找到下面这行代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=$&#123;JAVA_HOME&#125;</span><br></pre></td></tr></table></figure><p>将这行代码修改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.e179.x86_64/jre</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZ1ok.png" alt="LKZ1ok.png"></p><p>如果不知道 java 地址可以用 java -verbose 查找</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZbL8.png" alt="LKZbL8.png"></p><p>使 hadoop 配置生效，并进行验证</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">hadoop version</span><br><span class="line">whereis hdfs</span><br></pre></td></tr></table></figure><p>无错误信息表示hadoop已成功加入到CentOS系统环境中</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZt6y.png" alt="LKZt6y.png"></p><h2 id="第三节-配置Hadoop"><a href="#第三节-配置Hadoop" class="headerlink" title="第三节 配置Hadoop"></a>第三节 配置Hadoop</h2><p>3.1 Hadoop核心文件配置</p><p>进入 hadoop 的 etc 文件夹，配置 core-site.xml 文件，修改成以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--指定文件系统的入口地址，可以为主机名或ip --&gt;</span><br><span class="line">    &lt;!--端口号默认为8020 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://master:8020&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!--指定hadoop的临时工作存目录--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/usr/hadoop/tmp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZsNt.png" alt="LKZsNt.png"></p><p>配置 yarn-env.sh 文件，修改JAVA_HOME行为（记得去掉前面的注释符#）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.e179.x86_64/jre</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZkLz.png" alt="LKZkLz.png"></p><p>配置 hdfs-site.xml 文件，修改成以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--指定hdfs备份数量，小于等于从节点数目--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;dfs.namenode.http.address&lt;/name&gt;</span><br><span class="line">                   &lt;value&gt;master:50070&lt;/value&gt;</span><br><span class="line">           &lt;/property&gt;</span><br><span class="line">  &lt;!--  自定义hdfs中namenode的存储位置--&gt;</span><br><span class="line">  &lt;!--  &lt;property&gt;--&gt;</span><br><span class="line">  &lt;!--      &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;--&gt;</span><br><span class="line">  &lt;!--      &lt;value&gt;file:/usr/hadoop/dfs/name&lt;/value&gt;--&gt;</span><br><span class="line">  &lt;!--  &lt;/property&gt;--&gt;</span><br><span class="line">  &lt;!--  自定义hdfs中datanode的存储位置--&gt;</span><br><span class="line">  &lt;!--  &lt;property&gt;--&gt;</span><br><span class="line">  &lt;!--      &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;--&gt;</span><br><span class="line">  &lt;!--      &lt;value&gt;file:/usr/hadoop/dfs/data&lt;/value&gt;--&gt;</span><br><span class="line">  &lt;!--&lt;/property&gt;--&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZE2R.png" alt="LKZE2R.png"></p><p>配置 mapred-site.xml 文件，通过 cp 命令生成不带后缀 template 的文件</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZmbu.png" alt="LKZmbu.png"></p><p>编辑 mapred-site.xml 文件，修改为以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--hadoop的MapReduce程序运行在YARN上--&gt;</span><br><span class="line">    &lt;!--默认值为local--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZr5C.png" alt="LKZr5C.png"></p><p>配置 yarn-site.xml 文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;master&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;     </span><br><span class="line">    &lt;!--nomenodeManager获取数据的方式是shuffle--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;  </span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZoVX.png" alt="LKZoVX.png"></p><p>修改 slaves 文件，删除原有内容，新增即将要建立的两个虚拟机的 host­name</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZp4G.png" alt="LKZp4G.png"></p><p>3.2 克隆多台slave机</p><p>使用 mas­ter 镜像克隆 3 台虚拟机 (创建完整克隆)，名称分别为 slave1、slave2、slave3，根据电脑配置情况可以自由设置数量，以下步骤与上方执行过程相同。</p><p>修改每个slave的主机名，方法同2.3</p><p>进入etc/sysconfig/network-scripts中，修改每台slave机的ip地址 ，方法同1.3</p><h2 id="第四节-配置SSH登录"><a href="#第四节-配置SSH登录" class="headerlink" title="第四节 配置SSH登录"></a>第四节 配置SSH登录</h2><p>4.1 生成公钥私钥</p><p>在 master 和每台 slave 上，使用 rsa 算法产生公钥和私钥</p><p>4.2 发送公钥</p><p>在 mas­ter 上创建一个大家通用的公钥 authorized_keys，修改 authorized_keys 权限，并将这个公钥发送给每个 slave.</p><p>在master和每台slave上，使用rsa算法产生公钥和私钥（安装过程中，使用“Enter”键确定）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>查看生成的私钥id_rsa和公钥id_rsa.pub</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/.ssh/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>在master上创建一个大家通用的公钥authorized_keys，修改authorized_keys权限，并将这个公钥发送给每个slave</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">chmod 644 authorized_keys</span><br><span class="line">systemctl restart sshd.service</span><br><span class="line">scp /root/.ssh/authorized_keys slave1:/root/.ssh</span><br><span class="line">scp /root/.ssh/authorized_keys slave2:/root/.ssh</span><br></pre></td></tr></table></figure><p><img src="https://s6.jpg.cm/2022/04/02/LKZ4FD.png" alt="LKZ4FD.png"></p><p>4.3 验证SSH</p><p>ssh 登录检验，不需要密码即可登录路径从 ‘<del>/.ssh ‘ 变成 ‘</del>‘，登出为 exit</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZvD4.png" alt="LKZvD4.png"></p><h2 id="第五节-准备运行hadoop"><a href="#第五节-准备运行hadoop" class="headerlink" title="第五节 准备运行hadoop"></a>第五节 准备运行hadoop</h2><p>5.1 格式化HDFS</p><p>在 master 机上，进入 hadoop 下的 bin 文件夹，运行以下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><p>注意：只需格式化一次！多次格式化会导致 NameNode 和 DataNode 的集群 ID 值不匹配，需要在格式化前删除 NameNode，DataNode、日志等文件夹。</p><p>5.2 启动hadoop</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZ02E.png" alt="LKZ02E.png"></p><p>5.3 jps检查进程</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZzNT.png" alt="LKZzNT.png"></p><p>5.4 通过web端访问hadoop</p><p>查看 NameNode、DataNode：</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZg76.png" alt="LKZg76.png"></p><p>查看 YARN 界面：</p><p><img src="https://s6.jpg.cm/2022/04/02/LKZByp.png" alt="LKZByp.png"></p><p>参考<a href="http://blog.dengjiayang.cn/archives/hadoop.html/" title="Title">Hadoop 配置手册</a> </p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第一章-hadoop环境搭建&quot;&gt;&lt;a href=&quot;#第一章-hadoop环境搭建&quot; class=&quot;headerlink&quot; title=&quot;第一章 hadoop环境搭建&quot;&gt;&lt;/a&gt;第一章 hadoop环境搭建&lt;/h1&gt;&lt;h2 id=&quot;第一节-虚拟机配置&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="courses" scheme="https://zero617.top/categories/courses/"/>
    
    
    <category term="Hadoop" scheme="https://zero617.top/tags/Hadoop/"/>
    
    <category term="大数据分析" scheme="https://zero617.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="分布式存储" scheme="https://zero617.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>爬虫学习&quot;beautiful soup&quot;</title>
    <link href="https://zero617.top/2021/11/17/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%98beautiful-soup%E2%80%99/"/>
    <id>https://zero617.top/2021/11/17/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%98beautiful-soup%E2%80%99/</id>
    <published>2021-11-17T06:47:55.000Z</published>
    <updated>2022-05-10T14:53:33.663Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s6.jpg.cm/2022/04/02/LKZRnT.jpg" alt="LKZRnT.jpg"></p><p>使用教材：《Python网络爬虫权威指南（第2版）》</p><p>目标：爬取bangumi的排行榜</p><p>已知问题：由于排行榜后507页都是空白，没做页数检测。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askurl</span>(<span class="params">url</span>):</span></span><br><span class="line">    head = &#123;  <span class="comment"># 模拟浏览器头部信息，这段我抄的https://blog.csdn.net/bookssea/article/details/107309591</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla / 5.0(Windows NT 10.0; Win64; x64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 80.0.3987.122  Safari / 537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url, headers=head)</span><br><span class="line">    html = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib.request.urlopen(request)</span><br><span class="line">        html = response.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">&quot;code&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.code)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">&quot;reason&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.reason)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#    print(&quot;URL内容请求成功&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>():</span></span><br><span class="line">    <span class="comment">#    取前10页</span></span><br><span class="line">    urls = [<span class="string">&#x27;https://bgm.tv/anime/browser?sort=rank&amp;page=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">277</span>)]</span><br><span class="line">    <span class="comment">#    输出验证</span></span><br><span class="line">    <span class="comment">#    print(urls)</span></span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clearblankline</span>():</span></span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fr, <span class="built_in">open</span>(<span class="string">&#x27;bgm排行榜.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">        <span class="keyword">for</span> text <span class="keyword">in</span> fr.readlines():</span><br><span class="line">            <span class="keyword">if</span> text.split():</span><br><span class="line">                fd.write(text)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">                    fd.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输出成功....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> get_page():</span><br><span class="line">        html = askurl(url)  <span class="comment"># 保存获取到的网页源码</span></span><br><span class="line">        bs = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;li&#x27;</span>, class_=re.<span class="built_in">compile</span>(<span class="string">&#x27;(item )(odd|even)( clearit)&#x27;</span>)):</span><br><span class="line">            <span class="comment"># print(name.get_text())</span></span><br><span class="line">            txtfile = <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            txtfile.write(name.get_text())</span><br><span class="line">            txtfile.close()</span><br><span class="line">            show()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;爬取完成&quot;</span>)</span><br><span class="line">    clearblankline()</span><br></pre></td></tr></table></figure><h1 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h1><h2 id="askurl-函数"><a href="#askurl-函数" class="headerlink" title="askurl()函数"></a>askurl()函数</h2><p>请求网页源码，因为是照搬了网上找到的一段代码，就不多做分析，直接使用即可。</p><h2 id="get-page-函数"><a href="#get-page-函数" class="headerlink" title="get_page()函数"></a>get_page()函数</h2><p>功能：获取多个页面</p><h2 id="clearblankline-函数"><a href="#clearblankline-函数" class="headerlink" title="clearblankline()函数"></a>clearblankline()函数</h2><p>功能：打开源文件清除空行并以每4行一空行的格式输出新文件  </p><p>split()判断该行是否有内容，如果有内容则值为真，而fd.write()用来写入源文本，每4行插入换行符“\n”</p><h2 id="show-函数"><a href="#show-函数" class="headerlink" title="show()函数"></a>show()函数</h2><p>功能：显示进程速度</p><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bs.find_all(<span class="string">&#x27;li&#x27;</span>, class_=re.<span class="built_in">compile</span>(<span class="string">&#x27;(item )(odd|even)( clearit)&#x27;</span>))</span><br></pre></td></tr></table></figure><p>使用了正则表达式来进行查找</p><h2 id="附源码地址："><a href="#附源码地址：" class="headerlink" title="附源码地址："></a>附源码地址：</h2><p><a href="https://github.com/zero617/Crawler_Learning/tree/main/bgm">https://github.com/zero617/Crawler_Learning/tree/main/bgm</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s6.jpg.cm/2022/04/02/LKZRnT.jpg&quot;</summary>
        
      
    
    
    
    <category term="courses" scheme="https://zero617.top/categories/courses/"/>
    
    
    <category term="爬虫" scheme="https://zero617.top/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="beautiful soup" scheme="https://zero617.top/tags/beautiful-soup/"/>
    
  </entry>
  
  <entry>
    <title>最全小白向！记hexo博客搭建及 butterfly主题使用（三）</title>
    <link href="https://zero617.top/2021/10/23/%E6%9C%80%E5%85%A8%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%81%E8%AE%B0hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8Abutterfly%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8-%E4%B8%89/"/>
    <id>https://zero617.top/2021/10/23/%E6%9C%80%E5%85%A8%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%81%E8%AE%B0hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8Abutterfly%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8-%E4%B8%89/</id>
    <published>2021-10-23T06:40:09.000Z</published>
    <updated>2022-05-10T14:53:33.663Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s6.jpg.cm/2022/04/01/LK2RWp.jpg" alt="LK2RWp.jpg"><br>hexo博客的搭建在前两节已经基本完成，接下来我们就可以开始我们的文章创作之旅了。<br>不过，如果你对默认主题不太满意，可以在hexo theme中寻找一些满意的主题来使用，当然，感兴趣的人或者技术大佬也可以选择自制主题。那么，在这里我就为大家讲解一下butterfly主题的使用方法。</p><h1 id="修改网站标题和相关介绍"><a href="#修改网站标题和相关介绍" class="headerlink" title="修改网站标题和相关介绍"></a>修改网站标题和相关介绍</h1><p>在博客文件夹根目录下修改_config.yml即可</p><figure class="highlight plaintext"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Zero617 の blog # 网站标题</span><br><span class="line">subtitle: &#x27;探索科技与二次元的一切&#x27; # 网站简介，出现在网站标题旁</span><br><span class="line">description: &#x27;软件分享、科技资讯、nacg轶事及分享&#x27; # 出现在个人资料下</span><br><span class="line">keywords:</span><br><span class="line">author: Zero617</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27;</span><br></pre></td></tr></table></figure><h1 id="具体配置文件使用方法"><a href="#具体配置文件使用方法" class="headerlink" title="具体配置文件使用方法"></a>具体配置文件使用方法</h1><p>主题相关配置就要到主题文件夹下的_config.yml里进行配置了。<br>这部分的具体用法可以参见<a href="%22https://butterfly.js.org/">作者博客</a>.<br>作者在里面进行了很详细简单的阐述<br>如果有不懂的可以在下面留言，我看见了都会回复的。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s6.jpg.cm/2022/04/01/LK2RWp.jpg&quot;</summary>
        
      
    
    
    
    <category term="courses" scheme="https://zero617.top/categories/courses/"/>
    
    
    <category term="Hexo" scheme="https://zero617.top/tags/Hexo/"/>
    
    <category term="github action" scheme="https://zero617.top/tags/github-action/"/>
    
    <category term="博客" scheme="https://zero617.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>最全小白向！记hexo博客搭建及butterfly主题使用（二）</title>
    <link href="https://zero617.top/2021/10/11/%E6%9C%80%E5%85%A8%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%81%E8%AE%B0hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%20butterfly%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://zero617.top/2021/10/11/%E6%9C%80%E5%85%A8%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%81%E8%AE%B0hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%20butterfly%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-10-11T12:20:46.000Z</published>
    <updated>2022-05-10T14:53:33.663Z</updated>
    
    <content type="html"><![CDATA[<hr><p>首先我们注意一下，在上一节中我们使用的是https协议进行部署，但在实际使用中发现，常常会出现SSL错误或者直接无法连上GitHub的问题。<br>这时候我们可以配置文件中修改推送仓库为git协议，如</p><figure class="highlight plaintext"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">    # Deployment</span><br><span class="line">    ## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">​    deploy:</span><br><span class="line">​      type: git</span><br><span class="line">​      repo: git@github.com:XXX/xxxxxx.github.io.git</span><br><span class="line">​      branch: main</span><br></pre></td></tr></table></figure><h2 id="这样就不会出现部署失败的情况了。"><a href="#这样就不会出现部署失败的情况了。" class="headerlink" title="这样就不会出现部署失败的情况了。  "></a>这样就不会出现部署失败的情况了。  </h2><p><img src="https://s6.jpg.cm/2022/04/01/LK0Mvu.jpg" alt="LK0Mvu.jpg"><br>之前我们讲了hexo的基本搭建和使用，但是搭建博客的目的是为了好好的写文章以及分享自己的知识和想法，所以每次写完文章后还要  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">heox deploy</span><br></pre></td></tr></table></figure>  <p>实在有些不太优雅，所以今天我们来讲一下它的自动部署。为了达成这个目的，我们借助了GitHub提供的GitHub action（也可以使用Travis CI，但不推荐)，实现push即部署的目的。  </p><h1 id="使用-GitHub-Actions-自动部署的好处"><a href="#使用-GitHub-Actions-自动部署的好处" class="headerlink" title="使用 GitHub Actions 自动部署的好处"></a>使用 GitHub Actions 自动部署的好处</h1><ul><li>可以直接在线编辑 md 文件，立即生效。假设你已发布一篇文章，过几天你在别的电脑上浏览发现有几个明显的错别字，这是完全不能容忍的。但此时你电脑上又没有 hexo + node.js + git 等完整的开发环境，重新配置开发环境明显不现实。如果使用 CI，你可以直接用浏览器访问 GitHub 上的项目仓库，直接编辑带错别字的 md 文章，改完，在线提交，稍等片刻，你的网站就自动更新了。</li><li>如果手动部署，需要先执行 hexo g 编译生成静态文件， 然后推送 public 整个文件夹到 GitHub 上，当后期网站文章、图片较多时候，很多时候连接 GitHub 不是那么顺畅，经常要傻等很长的上传时间。使用 GitHub Actions 自动部署，你只需 push _post 文件里单独的 md 文件即可，其他不用管，效率瞬间高了许多，其中的好处，谁用谁知道。</li><li>使用 GitHub Actions，你还可以一次性将这些静态博客页面部署到多个服务器上，例如：GitHub Pages、Gitee pages、七牛云、阿里云、腾讯云等等。</li><li>…  </li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>源代码和博客静态页面可以选择分两个仓库或两个分支进行存储，但比较推荐的是分成两个仓库进行存储，这样的话就可以将源代码设为私有仓库，避免配置文件<del>和大量堆积如山、杂乱的原稿</del>被发现。<br>这里我们就以分两个仓库进行存储作为示例来讲解。 </p><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><ul><li><p>私有仓库用来存储 Hexo 项目源代码。<br><img src="https://s6.jpg.cm/2022/04/01/LK0DXz.png" alt="LK0DXz.png"></p></li><li><p>公共仓库用来存储编译之后的静态页面。<br><img src="https://s6.jpg.cm/2022/04/01/LK0OiG.png" alt="LK0OiG.png"> </p></li></ul><p>本例中均使用main分支进行演示。  </p><h2 id="创建-GitHub-Token"><a href="#创建-GitHub-Token" class="headerlink" title="创建 GitHub Token"></a>创建 GitHub Token</h2><p>创建一个有 repo 和 workflow 权限的 GitHub Token 。<br>进入”setting”-“Developer settings”-“Personal access tokens”里，点击Generate new token<img src="https://s6.jpg.cm/2022/04/01/LK0agt.png" alt="LK0agt.png"></p><p>确认密码后，自己写个名字，选择有效时间（不建议选择永久，最好定期更换），如图勾选repo和workflow即可（<strong>注意生成的token只会生成一次，丢失后重新生成即可</strong>）<br><img src="https://s6.jpg.cm/2022/04/01/LK0xGR.png" alt="LK0xGR.png"></p><h2 id="添加-repository-secret"><a href="#添加-repository-secret" class="headerlink" title="添加 repository secret"></a>添加 repository secret</h2><p>将上面生成的 Token 添加到私有仓库的 “Settings”-“Secrets” 里，自己定一个名字（<strong>注意这个名字在后面的配置文件中会用到</strong>）。<br>步骤：私有仓库 -&gt; settings -&gt; Secrets -&gt; New repository secret。<br><img src="https://s6.jpg.cm/2022/04/01/LK2Ge4.png" alt="LK2Ge4.png"></p><h2 id="添加-Actions-配置文件"><a href="#添加-Actions-配置文件" class="headerlink" title="添加 Actions 配置文件"></a>添加 Actions 配置文件</h2><p>在这里我们使用了使用了 theme-keep 组织封装的现有函数 <a href="https://github.com/theme-keep/hexo-deploy-github-pages-action">hexo-deploy-github-pages-action</a>(支持者可以去大佬仓库star和fork)，如果希望自己更改配置，也可以尝试自己写配置文件。（推荐<a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions">此文</a>讲的比较清楚）</p><ol><li>在你的 Hexo 项目根目录下创建 .github 文件夹。</li><li>在 .github 文件夹下创建 workflows 文件夹。</li><li>在 workflows 文件夹下创建 hexo-deploy.yml 文件。</li></ol><p><img src="https://s6.jpg.cm/2022/04/01/LK2IsX.png" alt="LK2IsX.png"></p><p>hexo-deploy.yml 文件的内容如下：</p><figure class="highlight plaintext"><figcaption><span>hexo-deploy.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">name: deploying Hexo project to GitHub pages</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main # main 分支有 push 行为时就触发这个 action</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@master</span><br><span class="line"></span><br><span class="line">      - name: Build and Deploy</span><br><span class="line">        uses: theme-keep/hexo-deploy-github-pages-action@master # 使用专门部署 Hexo 到 GitHub pages 的 action</span><br><span class="line">        env:</span><br><span class="line">          PERSONAL_TOKEN: $ # secret 名</span><br><span class="line">          PUBLISH_REPOSITORY: zero617/zero617.github.io # 公共仓库，格式：GitHub 用户名/仓库名</span><br><span class="line">          BRANCH: main # 静态页面仓库分支</span><br><span class="line">          PUBLISH_DIR: ./public # 部署 public 目录下的文件</span><br></pre></td></tr></table></figure><p>到这里准备工作就结束了，可以进入部署了。</p><h1 id="部署自动触发流程"><a href="#部署自动触发流程" class="headerlink" title="部署自动触发流程"></a>部署自动触发流程</h1><ol><li>修改你的 Hexo 博客源代码（例如：增加文章、修改文章、更改主题、修改主题配置文件等等）。</li><li>把你修改过的 Hexo 项目内容（只提交修改过的那部分内容） push 到 GitHub 私有仓库（本例：keep-site-source）的 master 分支。</li><li>GitHub Actions 检测到 master 分支有内容 push 进来，会自动执行 action 配置文件的命令，将 Hexo 项目编译成静态页面，然后部署到公共仓库的 gh-pages 分支。</li><li>在私有仓库的 Actions 可以查看到你配置的 action。<br><img src="https://s6.jpg.cm/2022/04/01/LK2LKD.png" alt="LK2LKD.png"><br>（如果报错可以点击进入查询报错原因)</li></ol><p>本文大量摘自此文：<br>作者：XPoet<br>链接：<a href="https://juejin.cn/post/6943895271751286821">https://juejin.cn/post/6943895271751286821</a><br>来源：稀土掘金</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;hr&gt;
&lt;p&gt;首先我们注意一下，在上一节中我们使用的是https协议进行部署，但在实际使用中发现，常常会出现SSL错误或者直接无法连上GitHub的问题。&lt;br&gt;这时候我们可以配置文件中修改推送仓库为git协议，如&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    <category term="courses" scheme="https://zero617.top/categories/courses/"/>
    
    
    <category term="Hexo" scheme="https://zero617.top/tags/Hexo/"/>
    
    <category term="github action" scheme="https://zero617.top/tags/github-action/"/>
    
    <category term="博客" scheme="https://zero617.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="自动部署" scheme="https://zero617.top/tags/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>最全小白向！记hexo博客搭建及butterfly主题使用（一）</title>
    <link href="https://zero617.top/2021/10/05/%E8%AE%B0hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8Abutterfly%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8(%E4%B8%80)/"/>
    <id>https://zero617.top/2021/10/05/%E8%AE%B0hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8Abutterfly%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8(%E4%B8%80)/</id>
    <published>2021-10-05T09:26:44.000Z</published>
    <updated>2022-05-10T14:53:33.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拥有一个自己的博客是属于每一个男人的梦想。</p><footer><strong>某篇曾经看到的博文， 某个不知名的博主</strong></footer></blockquote><p><img src="https://s6.jpg.cm/2022/03/31/LKpKdt.jpg"><br>假期闲着没事干，正好手里有一台腾讯云的机子，于是就想到了去搭建一个属于自己的博客。最初我选用了使用人数最为广泛的<a href="https://cn.wordpress.org/" title="Wordpress">Wordpress</a>。确实，Wordpress配合<a href="https://www.bt.cn/?btwaf=38889240" title="宝塔面板">宝塔控制面板</a>的话搭建简单，同时区块编辑器对小白来说十分友好，均为图形化操作，并且还有着大量的插件和丰富的主题。但是因为我服务器是一核2G的小水管，还有大量其他的服务跑着，所以我把目光转向了静态博客（可以托管在GitHub或Gitee上）。在浏览过了大量的博客后，<a href="https://hexo.io/zh-cn/" title="Hexo">Hexo</a>由其高度的定制性、个性化被我选定。  </p><h1 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>因为Hexo是一款基于Node.js的静态博客框架，所以首先要安装Node.js。  </p><blockquote><ol><li><p>官网地址：<a href="http://nodejs.cn/download/" title="node,js">node.js</a>，下载最新的对应系统版安装包安装即可</p></li><li><p>安装完后，打开命令行检查安装是否成功  </p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\用户名&gt; <span class="title">node</span> -<span class="title">v</span>  </span></span><br><span class="line"><span class="function"><span class="title">v14</span>.16.1 # 笔者是旧版本，安装最新版本即可</span></span><br></pre></td></tr></table></figure></li><li><p>安装npm，用以下载Hexo和相关主题、插件</p> <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\用户名&gt; <span class="title">npm</span> <span class="title">install</span></span></span><br></pre></td></tr></table></figure><p>  因为是在国内，速度可能会比较慢，所以选择使用镜像源</p> <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">  # 临时通过 config 配置指向阿里巴巴镜像源</span><br><span class="line"><span class="function">  C:\<span class="title">Users</span>\用户名&gt; <span class="title">npm</span> <span class="title">config</span> <span class="title">set</span> <span class="title">registry</span> <span class="title">http</span>://<span class="title">registry.npm.taobao.org</span>   </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#临时使用可以添加<span class="title">registry</span>参数指定下载源</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\用户名&gt; <span class="title">npm</span> --<span class="title">registry</span> <span class="title">http</span>://<span class="title">registry.cnpmjs.org</span> <span class="title">info</span> <span class="title">express</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#永久设置镜像源</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\用户名&gt; <span class="title">npm</span> <span class="title">config</span> <span class="title">set</span> <span class="title">registry</span> <span class="title">http</span>://<span class="title">registry.npm.taobao.org</span>   </span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="安装git并连接GitHub"><a href="#安装git并连接GitHub" class="headerlink" title="安装git并连接GitHub"></a>安装git并连接GitHub</h3><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<br>而Hexo就使用git来进行管理和发布。  </p><blockquote><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a><strong>安装git</strong></h4><p>在Windows上使用Git，可以从<a href="https://git-scm.com/downloads" title="git下载">Git官网</a>直接下载安装程序，然后按默认选项安装即可。  </p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！  </p><p>在git bush中输入git –version来查看一下版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version <span class="comment"># 确认Git安装成功：运行命令查看版本号</span></span><br><span class="line">git version 2.33.0.windows.2 <span class="comment"># 笔者是旧版本，安装最新版本即可</span></span><br></pre></td></tr></table></figure><h4 id="连接GitHub"><a href="#连接GitHub" class="headerlink" title="连接GitHub"></a><strong>连接GitHub</strong></h4><ol><li><p>注册GitHub账户<br>到<a href="https://github.com/" title="GitHub官网">GitHub官网</a>注册账户。  </p></li><li><p>设置username和email</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> $ git config --global user.name “XXXXXX<span class="string">&quot; # 你的GitHub登陆名</span></span><br><span class="line"><span class="string">$ git config --global user.email “xxx@xxx.com”  # 你的GitHub注册邮箱 </span></span><br></pre></td></tr></table></figure> </li><li><p>连接git与github  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “xxx@xxx.com” <span class="comment"># xxx@xxx.com是你自己注册GitHub的邮箱</span></span><br></pre></td></tr></table></figure><p>到C:\Users\用户名.ssh\下查看是否有id_rsa和id_rsa.pub这两个文件，id_rsa.pub里的内容就是你的密钥  </p></li><li><p>接下来到GitHub上，打开“Settings”-“SSH and GPG keys”页面，然后点击“New SSH Key”，填上Title（随意写），在Key文本框里粘贴 id_rsa.pub文件里的全部内容。</p></li><li><p>验证是否成功，在git bash里输入下面的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi XXXXXX! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access. # XXXXXX是你的GitHub用户名</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="GitHub建立部署"><a href="#GitHub建立部署" class="headerlink" title="GitHub建立部署"></a>GitHub建立部署</h2><h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><p>进入GitHub，点击右上角的+号，点击New repository<br><img src="https://s6.jpg.cm/2022/03/31/LKp3TC.png"><br>Repository name处填入自己的仓库名称XXX.github.io<br>注意要选择Public，即公开仓库，否则你的网页是无法访问的<br>勾选上README初始化<br>其他默认即可<br><img src="https://s6.jpg.cm/2022/03/31/LKp2p5.png"></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>创建一个blog文件夹，<strong>注意：之后的操作都在blog文件夹内进行，如果出错删除该文件夹后重新进行即可。</strong><br>在blog文件夹内右键，点击 git bash here  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看hexo版本</span></span><br><span class="line">$ hexo -v </span><br><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: win32 10.0.22000</span><br><span class="line">node: 14.16.1</span><br><span class="line">......    <span class="comment"># 安装成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化博客</span></span><br><span class="line">$ hexo init blog</span><br><span class="line"><span class="comment"># 在本地预览博客</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>完成后，在浏览器地址栏中输入localhost:4000，就可看到Hexo内置的第一篇博文Hallo world。</p><h3 id="常用的Hexo-命令"><a href="#常用的Hexo-命令" class="headerlink" title="常用的Hexo 命令"></a>常用的Hexo 命令</h3><blockquote><ul><li>npm install hexo -g # 安装Hexo  </li><li>npm update hexo -g # 升级  </li><li>hexo init # 初始化博客  </li></ul><p>命令简写  </p><ul><li><p>hexo n “我的博客” == hexo new “我的博客” # 新建文章  </p></li><li><p>hexo g == hexo generate # 生成  </p></li><li><p>hexo s == hexo server # 启动服务预览  </p></li><li><p>hexo d == hexo deploy # 部署  </p></li><li><p>hexo server # Hexo会监视文件变动并自动更新，无须重启服务器  </p></li><li><p>hexo server -s # 静态模式  </p></li><li><p>hexo server -p 5000 # 更改端口  </p></li><li><p>hexo server -i 192.168.1.1 # 自定义 IP  </p></li><li><p>hexo clean # 清除缓存，若是网页正常情况下可以忽略这条命令</p></li></ul></blockquote><h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为站点配置文件，如下图<br><img src="https://s6.jpg.cm/2022/04/01/LK09W5.png"><br>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：  </p><figure class="highlight plaintext"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    # Deployment</span><br><span class="line">    ## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">​    deploy:</span><br><span class="line">​      type: git</span><br><span class="line">​      repo: https://github.com/XXXXXX/XXX.github.io.git **# 记得添加.git后缀**</span><br><span class="line">​      branch: main</span><br></pre></td></tr></table></figure><p>最后安装Git部署插件，输入命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">​    npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>接着，分别输入这三条命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">​    $ hexo clean </span><br><span class="line">​    $ hexo g </span><br><span class="line">​    $ hexo d</span><br></pre></td></tr></table></figure><p>完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="http://xxxx.github.io/">http://xxxx.github.io</a> ,<br>你就会发现你的博客已经上线了，可以在网络上被访问了。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>此时的网址还是GitHub的xxxx.github.io，想要个性化的我们自然不会就这么算了，我们可以绑定属于自己的域名到GitHub的服务器上。</p><blockquote><ol><li>首先进入自己域名的管理台，进入解析，删除原有的解析。添加两条解析记录：  <ol><li>记录类型：CNAME 主机记录：www 记录值：xxxx.github.io</li><li>记录类型：A 主机记录：@ 记录值：IP # IP通过命令行ping xxxx.github.io可以得到</li></ol></li><li>登录GitHub，进入之前创建的仓库，点击”Settings”-“Pages”,在Custom domain处填入你的域名，save保存，GitHub会自动给你配置TLS证书(可能比较慢)，等一段时间后，可以开启强制https。</li><li>进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名（不需要带www），保存，命名为CNAME ，<strong>注意保存成所有文件而不是txt文件</strong>。如下图：<br><img src="https://s6.jpg.cm/2022/04/01/LK0THC.png"><br>完成这三步后，依次输入  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>现在你就可以用你自己的域名访问自己的网站了！</li></ol></blockquote><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>Hexo有大量的<a href="https://hexo.io/themes/">个性化主题</a>可以使用 本博客使用的是Butterfly主题，就以此主题作为示例进行演示。</p><blockquote><ol><li>下载主题<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>现在，主题文件就被你下载到了blog目录的themes主题下的butterfly文件夹中。</li><li>打开站点的_config.yml配置文件，修改主题为butterfly<figure class="highlight plaintext"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure>现在再去看你的博客，就会发现它已经变成了你想要的样子。  </li></ol></blockquote><p>下次具体讲讲butterfly主题的配置，如果对这个主题并不感兴趣可以跳过这篇文章。<br>另外，有机会的话我也会略微提一下wordpress的搭建，不过这类教程网上已经很多了，所以如果需求多的话我就写一下吧。<br>感谢您的阅读。</p><p>引用<br>    <a href="https://blog.csdn.net/MissOfSpring/article/details/103808208">git连接github完整教程</a><br>    <a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;&lt;p&gt;拥有一个自己的博客是属于每一个男人的梦想。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;某篇曾经看到的博文， 某个不知名的博主&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="courses" scheme="https://zero617.top/categories/courses/"/>
    
    
    <category term="Hexo" scheme="https://zero617.top/tags/Hexo/"/>
    
    <category term="博客" scheme="https://zero617.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="github" scheme="https://zero617.top/tags/github/"/>
    
  </entry>
  
</feed>
